{"version":3,"sources":["Pages/Counter/Counter.module.css","store/storeHelper.ts","Utils.ts","store/stores/counterStore.ts","store/stores/playerStore.ts","store/Linker.ts","components/NavMenu.tsx","components/Layout.tsx","Pages/Counter/Counter.tsx","../../../../libs/react/my-react-lib/lib/esm/index.js","Pages/Home.tsx","Pages/Players/playerrow.tsx","Pages/Players/Player.tsx","App.tsx","serviceWorker.ts","index.tsx","store/configureStore.ts"],"names":["module","exports","StateFunctionBuilder","storeName","newState","type","action","state","s","key","ActionBuilder","act","configureReducer","Name","initialState","incommingAction","undefined","newstate","delay","ms","Promise","res","rej","setTimeout","actionType","createAction","Store","createDispatch","dispatch","dispatchState","actions","increment","value","incrementValue","decrement","incrementByAmount","ammount","incrementAsync","a","incrementIfOdd","setIncrementAmmount","reducer","playerStore","setState","requestPlayers","startindex","getState","appState","players","startIndex","isLoading","fetch","then","resp","json","getByIdentifiers","identifiers","JSON","stringify","reducers","counter","Counter","Players","NavMenu","isOpen","toggle","Navbar","className","light","Container","NavbarBrand","tag","Link","to","NavbarToggler","onClick","this","Collapse","navbar","NavItem","NavLink","React","Layout","props","children","styles","row","button","textbox","onChange","e","Number","parseInt","target","asyncButton","connect","CounterStore","__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","prototype","hasOwnProperty","call","TypeError","String","__","constructor","create","Hello","_super","apply","arguments","render","createElement","Component","href","PlayerRow","useState","open","setOpen","uuid","collapse","setCollapse","Fragment","Button","player","name","group","lastOnlineOnServer","currentHandle","style","minHeight","margin","padding","colSpan","onExited","Card","background","CardBody","CardTitle","CardSubtitle","wentOnline","renderIdentifierTable","Identifiers","entrys","i","push","Player","ensureDataFetched","id","renderPagination","renderPlayerTable","match","params","Table","map","index","startind","prevStartIndex","nextStartIndex","PureComponent","PlayerStore","exact","path","component","Home","Boolean","window","location","hostname","baseUrl","document","getElementsByTagName","getAttribute","history","createBrowserHistory","basename","store","preloadedState","middleware","thunk","routerMiddleware","rootReducer","combineReducers","router","connectRouter","enhancers","windowIfDefined","__REDUX_DEVTOOLS_EXTENSION__","createStore","compose","applyMiddleware","configureStore","ReactDOM","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.d3c3261a.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"row\":\"Counter_row__Y0SuW\",\"value\":\"Counter_value__31jjN\",\"button\":\"Counter_button__1wjCh\",\"textbox\":\"Counter_textbox__1JKlh\",\"asyncButton\":\"Counter_asyncButton__2t70i Counter_button__1wjCh\"};","import { Action } from \"redux\";\r\nimport { AppState } from \".\";\r\n\r\n\r\ntype Dict = {[key : string] : any}; \r\n\r\nexport type NType<TObject> = {[P in keyof TObject]? : TObject[P]};\r\n\r\n\r\n\r\nexport interface AppThunkAction<TAction>{\r\n    (dispatch :(action : TAction) => void, getState: () => AppState): void;\r\n}\r\n\r\ntype DispatchAction<TState> = {\r\n    type : string;\r\n    action : (state : TState) => TState;\r\n}\r\n\r\n/**\r\n * Generic Thunk to create actions with 'dispatch' and 'getState'\r\n * @example \r\n * \r\n * const actions = {\r\n *      myAction ():Thunk<MyState> => (dispatch, getState) => {\r\n *          const currentState = getState().myStore;\r\n *          \r\n *          if(currentstate.myValue === 1)\r\n *                dispatch(createAction<MyState>((state)=>{\r\n *                     state.myValue = 0;\r\n *                      return state;  \r\n *                })));\r\n *      }\r\n * }\r\n */\r\nexport type Thunk<TState> = AppThunkAction<DispatchAction<TState>>\r\n\r\n/**\r\n * \r\n * @param storeName The name of the current Store or the key to the store\r\n * @param action the logic behind the Action to manipulate the State\r\n * @returns a Thunk that can be directly used on the action.\r\n * \r\n * @example\r\n * \r\n * const actions = {\r\n *      increment : createDispatch<MyState>(\"<MY_STORE>\", (state) =>{\r\n *          state.value++;\r\n *          return state;\r\n *      }),\r\n *      decrement : createDispatch<MyState>(\"<MY_STORE>\", (state) => {\r\n *          state.value--;\r\n *          return state;\r\n *      })\r\n * }\r\n */\r\nexport const createDispatch = <TState>(storeName : string, action: (state : TState) => TState) : Thunk<TState> => (dispatch) =>{\r\n    dispatch({type : storeName, action : action});\r\n};\r\n\r\n/**\r\n * Creates an Action for Dispatch, this is usefull when working with async Actions to be able to trigger 'dispatch' manually\r\n * @param typeName this is to determine you talking with the right reducer make sure each store has a unique type\r\n * @param act here you can define a function that will be called in the reducer to manipulate the State of the component.\r\n * @returns {DispatchAction} a finished action wich can be taken from 'dispatch'\r\n * @example  \r\n \r\n//predifined typing for faster usage\r\nconst createAction = (action : (state : MyState) => MyState) =>{\r\n    return Store.createAction(\"MYSTATE_ACTION\", action);\r\n}\r\n\r\n//The actions used in the component later on\r\nconst actionCreator = {\r\n        incrementAsync : (): Store.Thunk<MyState> => async (dispatch) =>\r\n        {\r\n            await delay(500);\r\n            dispatch(createDispatch((state) => {\r\n            state.myProperty = \"newValue\";\r\n            return state;\r\n    }))\r\n    },\r\n    };\r\n*/\r\nexport const createAction = <TState>(typeName : string, act: (state : TState) => TState): DispatchAction<TState> => {\r\n    return {type : typeName, action : act};\r\n}\r\n\r\nexport function StateFunctionBuilder <TState>(storeName : string) {\r\n    return (newState: NType<TState>) => createAction<TState>(storeName, (state) => {\r\n        var s = state as Dict;\r\n        for(var key in newState)\r\n            s[key] = newState[key] ?? s[key]; \r\n        return state as TState;\r\n    });\r\n} \r\n\r\nexport const StateDispatchBuilder = <TState>(storeName : string) => (newState : NType<TState>) => createDispatch<TState>(storeName, (state) => {\r\n    var s = state as Dict;\r\n    for(var key in newState)\r\n        s[key] = newState[key] ?? s[key]; \r\n    return state;\r\n});\r\n\r\n\r\n/**\r\n * Method to create a dispatch method to create action later on\r\n * @param storeName the name of the Store\r\n * @returns a function to easily create Dispatches\r\n * @example\r\n * \r\n * //The builder to create Actions from\r\n * const createDispatch = DispatchBuilder<MyState>(\"<STORE_NAME>\");\r\n * \r\n * //The actions used in the component later on\r\n * const actions = {\r\n *    setSomeValue0 : createDispatch((state) => {\r\n *      state.myValue = \"someValue\";\r\n *      return state;\r\n *    }),\r\n *    IncreaseValue : createDispatch((state) => {\r\n *      state.myNumber += 1;\r\n *      return state;\r\n *    })\r\n * };\r\n */\r\nexport const DispatchBuilder = <TState>(storeName : string) => (act: (state : TState) => TState) : Thunk<TState> => (dispatch) =>{\r\n    dispatch({type : storeName, action : act});\r\n};\r\n\r\n\r\n/**\r\n * Method to create a dispatch method to create action later on\r\n * @param storeName the name of the Store\r\n * @returns a function to easily create Actions for use in async context\r\n * @example\r\n * \r\n * \r\n * \r\n *  interface MyState {\r\n *  myProperty : string;\r\n *  myData : MyData;\r\n *  index : number;\r\n * }\r\n * \r\n * \r\n * \r\n *  //predifined typing for faster usage\r\n    const createAction = ActionBuilder<MyState>(\"<STORE_NAME>\")\r\n\r\n    //The actions used in the component later on\r\n    const actions = {\r\n        setValueAsync : (): Store.ThunkAction<MyState> => async (dispatch) =>{\r\n            await delay(500);\r\n            dispatch(\r\n                createAction((state) => {\r\n                    state.myProperty = \"newValue\";\r\n                    return state;\r\n                })\r\n            );\r\n        },\r\n        fetchMyData : (index: number): ThunkAction<MyState> => async (dispatch, getState) =>{\r\n            const appState = getState();\r\n            if(appState && appState.myState && index !== appState.myState.index)\r\n            {\r\n                var myData = (await fetch(`api/myData?index=${index}`).then(resp => resp.json())) as MyData; \r\n                dispatch(\r\n                    createAction((state) => {\r\n                        state.myData = myData;\r\n                        return state;\r\n                    })\r\n                );\r\n            }\r\n        }\r\n    };\r\n    */\r\nexport const ActionBuilder = <TState>(storeName: string) => (act : (state : TState) => TState): DispatchAction<TState> => {\r\n    return {type : storeName, action : act};\r\n}\r\n\r\n/**\r\n * Function to generate a predefined Reducer function which will manage the incomming actions later on for your store\r\n * @param Name The Name of the Store\r\n * @param initialState the initial state of the Reducer\r\n * @returns the actual reducer function so you dont ned to write your own..\r\n * @example\r\n * \r\n * const initState : MyState = {\r\n *      myValue : 0,\r\n *      mySecondValue : 2\r\n * }\r\n * const reducer = configureReducer(\"<MY_STORE>\", initState);\r\n */\r\nexport const configureReducer = <TState>(Name: string,initialState : TState ) => (state : TState | undefined, incommingAction : Action) : TState => {\r\n    if(state === undefined)\r\n        return initialState;\r\n    const action = incommingAction as DispatchAction<TState>;\r\n    var newstate = {...state};\r\n    if(action.type === Name)\r\n        return action.action(newstate);\r\n    return state;\r\n}","export const delay = (ms : number) => new Promise((res, rej)=> setTimeout(()=> res(\"\"), ms));\r\n","import * as Store from '..';\nimport { delay } from '../../Utils';\n\nexport interface CounterState {\n  value: number;\n  incrementValue : number;\n}\n\nconst initialState: CounterState = {\n  value: 0,\n  incrementValue : 2,\n};\n\nconst actionType = 'COUNTER_ACTION';\n//Predefined creators for fast action implementation\nconst createAction = Store.ActionBuilder<CounterState>(actionType);\nconst createDispatch = Store.DispatchBuilder<CounterState>(actionType);\nconst setState = Store.StateFunctionBuilder<CounterState>(actionType);\nconst dispatchState = Store.StateDispatchBuilder<CounterState>(actionType);\n\nexport const actions = {\n  increment : () => createDispatch((state) =>  ({value : state.value +1,incrementValue :state.incrementValue})),\n  decrement : ()=> createDispatch((state) => {\n      state.value--;\n      return state;\n  }),\n  incrementByAmount : (ammount : number) => createDispatch( (state) => {\n      state.value += ammount;\n      return state;\n  }),\n  incrementAsync : (): Store.Thunk<CounterState> => async (dispatch) =>{\n      await delay(500);\n      dispatch(createAction((state) => {\n        state.value++;\n        return state;\n      }))\n  },\n  incrementIfOdd : (ammount : number) => createDispatch((state) => {\n      if(state.value % 2 === 1)\n        state.value += ammount;\n      return state;\n  }),\n  setIncrementAmmount : (ammount : number) => dispatchState({incrementValue : ammount}),\n}\nexport const reducer = Store.configureReducer(actionType, initialState);","import * as Store from '..'\r\nimport { NType } from '../storeHelper';\r\n\r\nconst playerStore = \"PLAYER_STORE\";\r\n\r\nexport interface PlayerState{\r\n    isLoading : boolean;\r\n    startIndex? : number;\r\n    players : Player[];\r\n}\r\n\r\nconst initState: PlayerState = {\r\n    isLoading : false,\r\n    startIndex : -1,\r\n    players : []   \r\n}\r\n\r\nexport interface Player {\r\n    id : string;\r\n    name : string;\r\n    group: string;\r\n    identifiers : {[key : string]: string};\r\n    wentOnline : Date;\r\n    wentOffline : Date;\r\n    lastOnlineOnServer : string;\r\n    currentHandle : number;\r\n}\r\n\r\nconst createAction = Store.ActionBuilder<PlayerState>(playerStore);\r\nconst createDispatch = Store.ActionBuilder<PlayerState>(playerStore);\r\n\r\nconst setState = Store.StateFunctionBuilder<PlayerState>(playerStore);\r\n\r\nexport const actions = {\r\n    requestPlayers : (startindex : number) : Store.Thunk<PlayerState> => async (dispatch,getState) =>{\r\n        \r\n        startindex = startindex >= 0? startindex : 0;\r\n        const appState = getState();\r\n        if(appState && appState.players && startindex !== appState.players.startIndex)\r\n        {\r\n            dispatch(\r\n                setState({isLoading : true})\r\n            );\r\n            var players = (await fetch(`api/player/*?skip=${startindex}`).then(resp => resp.json())) as Player[]    \r\n            dispatch(\r\n                setState({startIndex : startindex, players : players, isLoading : false})\r\n            );\r\n        }    \r\n    },\r\n    getByIdentifiers : (identifiers : {[key : string] : string}) : Store.Thunk<PlayerState> => async (dispatch, getState) =>{\r\n        \r\n        dispatch(\r\n            setState({isLoading : false})\r\n        );\r\n        var players = (await fetch(`api/player/ByIdentifiers/${JSON.stringify(identifiers)}`).then(resp => resp.json())) as Player[];\r\n        dispatch(\r\n            setState({startIndex : 0, players : players, isLoading : false})\r\n        );\r\n    }\r\n}\r\nexport const reducer = Store.configureReducer(playerStore, initState);","import { Interface } from 'readline';\r\nimport { Action } from 'redux';\r\nimport * as Counter from './stores/counterStore';\r\nimport * as Players from './stores/playerStore';\r\n\r\n/**\r\n * This is the Storage where the state of each components get cached..\r\n */\r\nexport interface AppState {\r\n    counter : Counter.CounterState | undefined;\r\n    players : Players.PlayerState | undefined;\r\n}\r\n\r\n/**\r\n     * the reducer Dictionary for custom reducers\r\n     */\r\n export const reducers = {\r\n    counter : Counter.reducer,\r\n    players : Players.reducer,\r\n};\r\n","import * as React from 'react';\r\nimport { Collapse, Container, Navbar, NavbarBrand, NavbarToggler, NavItem, NavLink } from 'reactstrap';\r\nimport { Link } from 'react-router-dom';\r\nimport './NavMenu.css';\r\n\r\nexport default class NavMenu extends React.PureComponent<{}, { isOpen: boolean }> {\r\n    public state = {\r\n        isOpen: false\r\n    };\r\n\r\n    public render() {\r\n        return (\r\n            <header>\r\n                <Navbar className=\"navbar-expand-sm navbar-toggleable-sm border-bottom box-shadow mb-3\" light>\r\n                    <Container>\r\n                        <NavbarBrand tag={Link} to=\"/\">react redux router Boilerplate</NavbarBrand>\r\n                        <NavbarToggler onClick={this.toggle} className=\"mr-2\"/>\r\n                        <Collapse className=\"d-sm-inline-flex flex-sm-row-reverse\" isOpen={this.state.isOpen} navbar>\r\n                            <ul className=\"navbar-nav flex-grow\">\r\n                                <NavItem>\r\n                                    <NavLink tag={Link} className=\"text-dark\" to=\"/\">Home</NavLink>\r\n                                </NavItem>\r\n                                <NavItem>\r\n                                    <NavLink tag={Link} className=\"text-dark\" to=\"/counter\">Counter</NavLink>\r\n                                </NavItem>\r\n                                <NavItem>\r\n                                    <NavLink tag={Link} className=\"text-dark\" to=\"/player\">Players</NavLink>\r\n                                </NavItem>\r\n                            </ul>\r\n                        </Collapse>\r\n                    </Container>\r\n                </Navbar>\r\n            </header>\r\n        );\r\n    }\r\n\r\n    private toggle = () => {\r\n        this.setState({\r\n            isOpen: !this.state.isOpen\r\n        });\r\n    }\r\n}","import * as React from 'react';\r\nimport { Container } from 'reactstrap';\r\nimport NavMenu from './NavMenu';\r\n\r\nexport default class Layout extends React.PureComponent<{}, { children?: React.ReactNode }> {\r\n    public render() {\r\n        return (\r\n            <React.Fragment>\r\n                <NavMenu />\r\n                <Container>\r\n                    {this.props.children}\r\n                </Container>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}","\nimport { connect } from 'react-redux';\nimport * as React from 'react';\nimport { RouteComponentProps } from 'react-router';\nimport * as Store from '../../store';\nimport styles from './Counter.module.css';\nimport {CounterStore} from '../../store/stores';\n\n\ntype CounterProps =\n  CounterStore.CounterState & \n  typeof CounterStore.actions & \n  RouteComponentProps<{}>;\n\n\nclass Counter extends React.PureComponent<CounterProps> {\n\n    public render(){\n      return (\n          <div>\n              <div className={styles.row}>\n                <button\n                  className={styles.button}\n                  aria-label=\"Decrement value\"\n                  onClick={() => this.props.decrement()}\n                >-\n                </button>\n                <span \n                  className={styles.value}\n                >{this.props.value}\n                </span>\n                <button\n                  className={styles.button}\n                  aria-label=\"Increment value\"\n                  onClick={() => this.props.increment()}\n                >+\n                </button>\n              </div>\n              <div className={styles.row}>\n                <input\n                  className={styles.textbox}\n                  aria-label=\"Set increment amount\"\n                  value={this.props.incrementValue}\n                  onChange={(e) => this.props.setIncrementAmmount(Number.parseInt(e.target.value, 10) || 0)}\n                />\n                <button\n                  className={styles.button}\n                  onClick={() => this.props.incrementByAmount(this.props.incrementValue)}\n                >Add Amount\n                </button>\n                <button\n                  className={styles.asyncButton}\n                  onClick={() => this.props.incrementAsync()}\n                >Add Async\n                </button>\n                <button\n                  className={styles.button}\n                  onClick={() => this.props.incrementIfOdd(this.props.incrementValue)}\n                >Add If Odd\n                </button>\n              </div>\n          </div>\n      );\n    }\n}\n\nexport default connect(\n  (state : Store.AppState) => state.counter,\n  CounterStore.actions\n)(Counter as any);","var __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = function (d, b) {\r\n        extendStatics = Object.setPrototypeOf ||\r\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\r\n        return extendStatics(d, b);\r\n    };\r\n    return function (d, b) {\r\n        if (typeof b !== \"function\" && b !== null)\r\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nimport React from \"react\";\r\nvar Hello = /** @class */ (function (_super) {\r\n    __extends(Hello, _super);\r\n    function Hello() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    Hello.prototype.render = function () {\r\n        return (React.createElement(\"div\", null,\r\n            React.createElement(\"span\", null, \"Hello World from a custom lib\")));\r\n    };\r\n    return Hello;\r\n}(React.Component));\r\nexport default Hello;\r\n","import * as React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport Hello from 'my-react-lib';\r\n\r\nconst Home = () => (\r\n  <div>\r\n    <Hello />\r\n    <h1>Hello, world!</h1>\r\n    <p>Welcome to your new single-page application, built with:</p>\r\n    <ul>\r\n        <li><a href='https://facebook.github.io/react/'>React</a>, <a href='https://redux.js.org/'>Redux</a> and <a href=\"https://reactrouter.com\">React-Router</a></li>\r\n      <li><a href='http://getbootstrap.com/'>Bootstrap</a> for layout and styling</li>\r\n    </ul>\r\n    <p>To help you get started, we have also set up:</p>\r\n    <ul>\r\n        <li><strong>Redux Store Helper</strong> I added helpers to create stores and reducers more easily.<br/> An example can be found in <code>./features/counter/Counter.tsx, ./store/stores/counterStore.tsx</code></li>\r\n      <li><strong>Client-side navigation</strong>. For example, click <em>Counter</em> then <em>Back</em> to return here.</li>\r\n      <li><strong>Efficient production builds</strong>. In production mode, development-time features are disabled, and your configuration produces minified, efficiently bundled JavaScript files.</li>\r\n    </ul>\r\n    <p>The <code>App</code> subdirectory is a standard React application based on the <code>create-react-app</code> template <code>--template redux-typescript</code>. If you open a command prompt in that directory, you can run <code>npm</code> commands such as <code>npm test</code> or <code>npm install</code>.</p>\r\n  </div>\r\n);\r\n\r\nexport default connect()(Home);\r\n","import React from \"react\";\r\nimport { CardList, Eye, EyeFill } from \"react-bootstrap-icons\";\r\nimport { Button, Card, CardBody, CardGroup, CardSubtitle, CardText, CardTitle, Collapse } from \"reactstrap\";\r\nimport {v4 as uuid } from \"uuid\";\r\nimport {Player}  from \"../../store/stores/playerStore\";\r\n\r\n\r\n\r\n\r\nexport function PlayerRow(props:  {player : Player, key : number | string})\r\n{\r\n    const [open, setOpen] = React.useState(false);\r\n    const id = uuid();\r\n    const [collapse , setCollapse] = React.useState(false);\r\n\r\n    return (\r\n        <React.Fragment> \r\n        <tr key={uuid()}>\r\n        <td>\r\n            <Button className=\"btn btn-default\" onClick={()=> { \r\n                    if(open)\r\n                        setCollapse(false);\r\n                    else\r\n                    {\r\n                        setOpen(true);\r\n                        setTimeout(()=> setCollapse(true),1);\r\n                    } \r\n                }\r\n            }>{open? <Eye/> : <EyeFill/>}</Button>\r\n        </td>\r\n        <td>{props.player.name}</td>\r\n        <td>{props.player.group}</td>\r\n        <td>{props.player.lastOnlineOnServer}</td>\r\n        <td>{props.player.currentHandle}</td>\r\n    </tr>\r\n    {open? \r\n    <tr>\r\n        <td style={{minHeight: \"0px\", margin:\"0px\", padding:\"0px\"}} colSpan={5}>\r\n        <Collapse isOpen={collapse} onExited={()=> setOpen(false)}>\r\n            <Card className=\"m-2\" style={{background:\"gray\"}}>\r\n                <div className=\"text-center\">\r\n                    <h5>{props.player.name}</h5>\r\n                    <h6>{props.player.group}</h6>\r\n                </div>\r\n                <div className=\"d-flex p-x-5\">\r\n                <div className=\"w-50 p-5\">\r\n                    <Card>\r\n                        <CardBody>\r\n                            <CardTitle>Last Login</CardTitle>\r\n                            <CardSubtitle>{props.player.wentOnline}</CardSubtitle>\r\n                        </CardBody>\r\n                    </Card>\r\n                </div>\r\n                <div className=\"w-50 p-5 context\">\r\n                    <span></span> Identifiers\r\n                    {renderIdentifierTable(props.player.identifiers)}</div>\r\n                </div>\r\n            </Card>\r\n        </Collapse>\r\n        </td>\r\n    </tr> : null}\r\n    </React.Fragment>\r\n    );\r\n}\r\n\r\n\r\n\r\n\r\nfunction renderIdentifierTable(Identifiers : {[key:string]:string})\r\n    {\r\n        var entrys = [];\r\n\r\n        var i = 0;\r\n        for( var key in Identifiers)\r\n        {\r\n            entrys.push(<tr key={i++}>\r\n                <td>{key}</td>\r\n                <td>{Identifiers[key]}</td>\r\n            </tr>);\r\n        }\r\n\r\n        return (\r\n            <div className=\"dropdown\">\r\n            <table className=\"table table-bordered table-hover table-dark\"> \r\n                <thead>\r\n                    <tr>\r\n                        <th>Key</th>\r\n                        <th>Value</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {entrys}\r\n                </tbody>\r\n            </table>\r\n            </div>\r\n        );\r\n    }\r\n","import React from \"react\";\r\nimport {Table} from \"reactstrap\";\r\nimport { connect } from \"react-redux\";\r\nimport { RouteComponentProps } from \"react-router\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { AppState } from \"../../store\";\r\nimport * as PlayerStore from '../../store/stores/playerStore';\r\nimport { PlayerRow } from \"./playerrow\";\r\nimport { jsonSchema } from \"uuidv4\";\r\n\r\ntype PlayerProps = PlayerStore.PlayerState \r\n& typeof PlayerStore.actions \r\n& RouteComponentProps<{ startIndex : string}>;\r\n\r\n\r\n\r\nclass Player extends React.PureComponent<PlayerProps>\r\n{\r\n    public componentDidMount(){\r\n        this.ensureDataFetched();\r\n    }\r\n\r\n\r\n\r\n    public componentDidUpdate(){\r\n        this.ensureDataFetched();\r\n    }\r\n\r\n    public render() {\r\n        return (\r\n            <React.Fragment>\r\n                <h1 id=\"tabelLabel\">Players</h1>\r\n                <p> Nlog demonstration</p>\r\n                {this.renderPagination()}\r\n                {this.renderPlayerTable()}\r\n            </React.Fragment>\r\n        )\r\n    }\r\n\r\n    private ensureDataFetched() {\r\n        const startIndex = parseInt(this.props.match.params.startIndex, 10) || 0;\r\n        this.props.requestPlayers(startIndex);\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n    private renderPlayerTable() {\r\n\r\n        return(\r\n            <Table className=\"table-bordered table-hover table-dark\">\r\n                <thead>\r\n                    <tr>\r\n                        <th></th>\r\n                        <th>Name</th>\r\n                        <th>Group</th>\r\n                        <th>last online on Server</th>\r\n                        <th>Current Server Handle</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {\r\n                       this.props.players.map((player,index) =>{\r\n                       return(<PlayerRow player={player} key={index}/>);\r\n                    })}\r\n                </tbody>\r\n            </Table>\r\n        );\r\n    }\r\n\r\n    private renderPagination()\r\n    {\r\n        const startind = (this.props.startIndex || 0);\r\n        const prevStartIndex = startind > 0? startind -20 : 0;\r\n        const nextStartIndex = (this.props.startIndex || 0) +20;\r\n\r\n        return (\r\n            <div className=\"d-flex \">\r\n                <Link className='btn btn-outline-secondary btn-sm' to={`/player/${prevStartIndex}`}>prev</Link>\r\n                <Link className=\"btn btn-outline-secondary btn-sm\" to={`/player/${nextStartIndex}`}>next</Link>\r\n            </div>\r\n        );\r\n    }\r\n\r\n\r\n\r\n\r\n}\r\n\r\nexport default connect(\r\n    (state: AppState) => state.players,\r\n    PlayerStore.actions\r\n)(Player as any);\r\n","import './App.css';\nimport Layout from './components/Layout';\nimport { Route } from 'react-router';\n\nimport Counter from './Pages/Counter/Counter';\nimport Home from './Pages/Home';\nimport Player from './Pages/Players/Player';\n\n\nexport default () => {\n  return (\n      <Layout>\n        <Route exact path=\"/\" component={Home}/>\n        <Route path=\"/counter\" component={Counter}/>\n        <Route path=\"/player/:startIndex?\" component={Player}/>\n      </Layout>\n  );\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\n\nimport {ConnectedRouter} from 'connected-react-router';\nimport configureStore from './store/configureStore';\nimport { createBrowserHistory } from 'history';\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nconst baseUrl = document.getElementsByTagName('base')[0].getAttribute('href') as string;\nconst history = createBrowserHistory({ basename: baseUrl });\n\nconst store = configureStore(history);\n\nReactDOM.render(\n  <React.Fragment>\n    <Provider store={store}>\n      <ConnectedRouter history={history}>\n      <App />\n      </ConnectedRouter>\n    </Provider>\n  </React.Fragment>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n\n//serviceWorker.register();\nserviceWorker.unregister();\n","import { createStore, compose, applyMiddleware, combineReducers } from 'redux';\nimport { History } from 'history';\nimport  {AppState, reducers} from './Linker';\nimport { connectRouter, routerMiddleware  } from 'connected-react-router';\nimport thunk from 'redux-thunk';\n\n\n\n\nexport default function configureStore(history : History, preloadedState? :AppState)\n{\n  const middleware = [\n    thunk,\n    routerMiddleware(history)\n  ];\n\n  const rootReducer = combineReducers({\n    ...reducers,\n    router: connectRouter(history)\n  });\n\n  const enhancers = [];\n\n  const windowIfDefined = typeof window === 'undefined' ? null : window as any; // eslint-disable-line @typescript-eslint/no-explicit-any\n    if (windowIfDefined && windowIfDefined.__REDUX_DEVTOOLS_EXTENSION__) {\n        enhancers.push(windowIfDefined.__REDUX_DEVTOOLS_EXTENSION__());\n    }\n\n\n  return createStore(\n      rootReducer,\n      preloadedState, \n      compose(applyMiddleware(...middleware), ...enhancers)\n  );\n}\n"],"sourceRoot":""}